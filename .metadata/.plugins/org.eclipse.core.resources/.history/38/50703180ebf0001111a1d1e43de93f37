/*
 * Example code used in exercises for lecture "Grundlagen des Software-Testens"
 * Created and given by Ina Schieferdecker and Edzard Hoefig
 * Freie Universitaet Berlin, SS 2012
 */
package exercise4.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collection;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;

import exercise4.addressbook.model.EmailAddress;
import exercise4.addressbook.model.Entry;
import exercise4.addressbook.model.Gender;
import exercise4.addressbook.model.PhoneNumber;
import exercise4.addressbook.view.AddressBookFilter;


/**
 * Uebung 4 - White Box Test
 * Condition Coverage
 * 
 * Bitte Nummer der Gruppe eintragen:
 * 0
 * 
 * Bitte Gruppenmitglieder eintragen:
 * @author ...
 */
public class TestConditionCoverage {

	Collection<Entry> entries=new ArrayList<Entry>();
	AddressBookFilter filter;
	Entry donald=new Entry("Duck","Donald",Gender.Male,new EmailAddress("donald@disney.com"),new DateTime(1980,1,1,0,0));
	Entry dagobert=new Entry("Duck","Dagobert",Gender.Male,new PhoneNumber(1234),new DateTime(1900,1,1,0,0));
	Entry tick=new Entry("Duck","Tick",Gender.Male,new PhoneNumber(1234),new DateTime(2002,1,1,0,0));
	Entry trick=new Entry("Duck","Trick",Gender.Male,new EmailAddress("trick@disney.com"),new DateTime(2002,1,1,0,0));
	Entry track=new Entry("Duck","Track",Gender.Male,new PhoneNumber(1234),new DateTime(2002,1,1,0,0));
	Entry mickey=new Entry("Maus","Mickey",Gender.Male,new PhoneNumber(1234),new DateTime(1980,1,1,0,0));
	Entry dicky=new Entry("Duck","Dicky",Gender.Female,new PhoneNumber(1234),new DateTime(2002,1,1,0,0));
	Entry dacky=new Entry("Duck","Dacky",Gender.Female,new EmailAddress("dacky@disney.com"),new DateTime(2002,1,1,0,0));
	Entry ducky=new Entry("Duck","Ducky",Gender.Female,new PhoneNumber(1234),new DateTime(2002,1,1,0,0));
	Entry daisy=new Entry("Duck","Daisy",Gender.Female,new PhoneNumber(1234),new DateTime(1980,1,1,0,0));
	Entry minnie=new Entry("Maus","Minnie",Gender.Female,new EmailAddress("minnie@disney.com"),new DateTime(1980,1,1,0,0));
	Entry millie=new Entry("Maus","Millie",Gender.Female,new EmailAddress("millie@disney.com"),new DateTime(2002,1,1,0,0));
	Entry klarabella=new Entry("Kuh","Klarabella",Gender.Female,new EmailAddress("klarabella@disney.com"),new DateTime(1980,1,1,0,0));
	@Before
	public void setUp(){
		entries.clear();
	}
	
	/*
     * Aufgabe 2a)
     * Benutzen Sie JUnit um die Funktion des Filter AddressBookFilter.MALE_ADULTS_PHONE zu testen.
     * Verwenden Sie zum Entwurf Ihrer Testfaelle die Strategie der Mehrfachbedingungsueberdeckung.
     */
	@Test
	public void testMaleAdultsPhone(){
								//	Male	|age>=18|Phone
		entries.add(dacky);		//	0		|0		|0
		entries.add(dicky);		//	0		|0		|1
		entries.add(minnie);		//	0		|1		|0
		entries.add(daisy);		//	0		|1		|1
		entries.add(trick);		//	1		|0		|0
		entries.add(tick);		//	1		|0		|1
		entries.add(donald);	//	1		|1		|0
		entries.add(dagobert);	//	1		|1		|1
		
		filter=AddressBookFilter.MALE_ADULTS_PHONE;
		Collection<Entry> results=filter.filter(entries);
		assertTrue("Results have to contain exactly 1 entries, instead of "+results.size()+".",results.size()==1);
		assertTrue("Results have to contain dagobert.",results.contains(dagobert));
	}
    
    /*
     * Aufgabe 2b)
     * Benutzen Sie JUnit um die Funktion des Filter AddressBookFilter.FEMALE_DUCK_OR_MAUS_OVER_30 zu testen.
     * Verwenden Sie zum Entwurf Ihrer Testfaelle die Strategie der minimal bestimmenden Mehrfachbedingungsueberdeckung.
     */
	@Test
	public void testFemaleDuckMausOver30(){
								//	Female	|Duck	|Maus	|age>=30|Ergebnis	|Minim.-Mehrfach-Überdeckung
								//	0		|0		|0		|0		|0			|-
								//	0		|0		|0		|1		|0			|-
								//	0		|0		|1		|0		|0			|-
		entries.add(mickey);	//	0		|0		|1		|1		|0			|+
								//	0		|1		|0		|0		|0			|-
		entries.add(donald);	//	0		|1		|0		|1		|0			|+
								//	0		|1		|1		|0		|0			|-
								//	0		|1		|1		|1		|0			|+ (Aber nicht möglich, da keine zwei Nachnamen möglich sind)
								//	1		|0		|0		|0		|0			|-
		entries.add(klarabella);//	1		|0		|0		|1		|0			|+
		entries.add(millie);	//	1		|0		|1		|0		|0			|+
		entries.add(minnie);	//	1		|0		|1		|1		|1			|+
		entries.add(dicky);		//	1		|1		|0		|0		|0			|+
		entries.add(daisy);		//	1		|1		|0		|1		|1			|+
								//	1		|1		|1		|0		|0			|+ (Aber nicht möglich, da keine zwei Nachnamen möglich sind)
								//	1		|1		|1		|1		|1			|+ (Aber nicht möglich, da keine zwei Nachnamen möglich sind)
		
		filter=AddressBookFilter.FEMALE_DUCK_OR_MAUS_OVER_30;
		Collection<Entry> results=filter.filter(entries);
		assertTrue("Results have to contain exactly 2 entries, instead of "+results.size()+".",results.size()==2);
		assertTrue("Results have to contain minnie.",results.contains(minnie));
		assertTrue("Results have to contain daisy.",results.contains(daisy));
	}
    
	/*
     * Aufgabe 2c)
     * Benutzen Sie JUnit um die Funktion des Filter AddressBookFilter.FEMALE_OR_MALE_KIDS_AND_SENIORS_WITH_D zu testen.
     * Verwenden Sie zum Entwurf Ihrer Testfaelle die Strategie der einfachen Bedingungsueberdeckung.
     */
	@Test
	public void testFemaleOrMaleKidSeniorWithD(){
								//	Female	|age<18	|age>=65|"D"	|Ergebnis	
								//	0		|0		|0		|0		|0			
								//	0		|0		|0		|1		|0			
								//	0		|0		|1		|0		|0			
		entries.add(dagobert);	//	0		|0		|1		|1		|1			
								//	0		|1		|0		|0		|0			
								//	0		|1		|0		|1		|1			
								//	0		|1		|1		|0		|0			
								//	0		|1		|1		|1		|1			
								//	1		|0		|0		|0		|0			
								//	1		|0		|0		|1		|1			
								//	1		|0		|1		|0		|0			
								//	1		|0		|1		|1		|1			
								//	1		|1		|0		|0		|0			
								//	1		|1		|0		|1		|1			
								//	1		|1		|1		|0		|0			
								//	1		|1		|1		|1		|1			
		
		filter=AddressBookFilter.FEMALE_DUCK_OR_MAUS_OVER_30;
		Collection<Entry> results=filter.filter(entries);
		assertTrue("Results have to contain exactly 2 entries, instead of "+results.size()+".",results.size()==2);
		assertTrue("Results have to contain minnie.",results.contains(minnie));
		assertTrue("Results have to contain daisy.",results.contains(daisy));
	}
}
