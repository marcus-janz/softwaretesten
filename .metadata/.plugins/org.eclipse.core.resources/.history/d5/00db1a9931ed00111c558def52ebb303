/*
 * Example code used in exercises for lecture "Grundlagen des Software-Testens"
 * Created and given by Ina Schieferdecker and Edzard Hoefig
 * Freie Universitaet Berlin, SS 2012
 */
package exercise2.test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;

import org.junit.Before;
import org.junit.Test;

import exercise2.addressbook.controller.AddressBookController;
import exercise2.addressbook.controller.AddressBookControllerImpl;
import exercise2.addressbook.controller.ParameterException;
import exercise2.addressbook.model.AddressBookModel;
import exercise2.addressbook.model.AddressBookModelImpl;
import exercise2.addressbook.model.Entry;
import exercise2.addressbook.model.SizeLimitReachedException;
import exercise2.addressbook.view.AddressBookView;


/**
 * Uebung 2 - Komponenten und Integrationstest
 * Komponententests für den Controller
 * 
 * Bitte Nummer der Gruppe eintragen:
 * 10
 * 
 * Bitte Gruppenmitglieder eintragen:
 * @author René Perschon
 * @author Martin Schulze
 * @author Anselm Brachmann
 * @author Marcus Janz
 */
public class AddressBookControllerIntegrationTest {
	
	/*
	 *  Aufgabe 3
	 *  Führen Sie im Rahmen eines Komponententests der Klasse exercise2.addressbook.controller.AddressBookControllerImpl einen Test der Methode add(...) durch.
	 *  Schreiben Sie für die model und view Komponenten Mock-Up Klassen und verwenden Sie dies im Komponententest der AddressBookController Komponente.
	 *  Testen Sie die add() Methode auf Herz und Nieren - es sind durchaus Fehler zu finden.
	 */
	
	// Model component for the test
	AddressBookModel model;
	
	// View component for the test
	AddressBookView view;
	
	// Controller component for the test
	AddressBookController controller;
	
	/**
	 * Set up test system
	 */
	@Before
	public void setUp() {
		// Instantiate and wire components
		this.model = new AddressBookModelImpl(new File("contacts.xml"));
		this.view = new AddressBookViewMockUp();
		this.controller = new AddressBookControllerImpl(model, view);
	}
	
	// TODO: Hier die Testfälle für den Komponententest hinschreiben
	
	@Test
	public void testAddFunctional(){
		try {
			controller.add("firstName", "lastName", "M", "12345", null);
			Entry e=model.getEntry("lastName", "firstName");
			assertTrue("Added Entry has not the same firstname.",e.getFirstName().equals("firstName"));
			assertTrue("Added Entry has not the same lastname.",e.getSurName().equals("lastName"));
			assertTrue("Added Entry has not the same gender.",e.isMale());
			assertTrue("Added Entry has not the same contactInfo.",e.getContactInformation().toString().equals("12345"));
		} catch (ParameterException e) {
			fail("Inputs are correct, so it must not throw ParameterException.");
		} catch (SizeLimitReachedException e) {
			fail("SizeLimit can't be reached at this Point.");
		}
	}
	
	@Test
	public void testErase(){
		try {
			controller.add("firstName2", "lastName2", "M", "12345", null);
		} catch (ParameterException e) {
			fail("Inputs are correct, so it must not throw ParameterException.");
		} catch (SizeLimitReachedException e) {
			fail("SizeLimit can't be reached at this Point.");

		}
		controller.remove(1);
		assertTrue("Model should be empty.",model.getEntries().size()==0);
	}
	
	@Test
	public void testRemove(){
		controller.remove();
		assertTrue("Model should be empty.",model.getEntries().size()==0);
	}
}
