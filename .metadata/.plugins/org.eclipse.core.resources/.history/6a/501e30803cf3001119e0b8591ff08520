/*
 * Example code used in exercises for lecture "Grundlagen des Software-Testens"
 * Created and given by Ina Schieferdecker and Edzard Hoefig
 * Freie Universitaet Berlin, SS 2012
 */
package exercise5.test;

import javax.swing.JTable;
import javax.swing.table.TableModel;

import junit.extensions.abbot.ComponentTestFixture;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import abbot.finder.ComponentNotFoundException;
import abbot.finder.MultipleComponentsFoundException;
import abbot.finder.matchers.NameMatcher;
import abbot.tester.JButtonTester;
import abbot.tester.JTextComponentTester;

/**
 * Uebung 5 - Black Box Test
 * GUI testing
 * 
 * Bitte Nummer der Gruppe eintragen:
 * 0
 * 
 * Bitte Gruppenmitglieder eintragen:
 * @author ...
 */
public class TestSorting extends ComponentTestFixture {

	// Tester for (radio) button components
	private JButtonTester buttonTester;

	// Tester for text field components
	private JTextComponentTester textTester;

	
	/**
	 * Creates test fixture
	 */
	@Before
	public void setUp() throws Exception {

		// Start the application
		exercise5.addressbook.Manager.main(null);
		
		// Setup some test instrumentation
		this.buttonTester = new JButtonTester();
		this.textTester = new JTextComponentTester();
	}

	/**
	 * Removes test fixture
	 */
	@After
	public void tearDown() throws Exception {
		// Nothing to do
	}
	
	/*
	 * Aufgabe 4
	 * Verwenden Sie JUnit zur Ueberpruefung der korrekten Sortierreihenfolge beim Hinzufuegen von Eintraegen in das Adressbuch.  
	 * Testen Sie dabei ausschliesslich nach Black-Box Prinzipien und greifen Sie niemals direkt auf Klassen zu
	 * die in den sub-packages model, view und controller des package exercise5.addressbook definiert sind. 
	 * Verwenden Sie das Abbot GUI test framework zur Testdurchfuehrung.
	 * 
	 * Hinweis:
	 * Die aktuelle Version von Abbot (1.2.0) hat auf manchen Systemen (z.B. OS X 10.7) Schwierigkeiten die richtige "Keymap" zu 
	 * erkennen. Als Folge davon werden einige Zeichen nicht richtig in die Textfelder eingetragen (z.B. Sonderzeichen, 
	 * y und z vertauscht...). Bitte ueberpruefen Sie bei Ihren Testfaellen, ob Abbot die richtigen Testdaten eintraegt und waehlen 
	 * Sie ggfs. andere.
	 */
	
	/*
	 * Äquivalenzklassen:
	 * 	gültig:
	 * 		- verschiedene Nachnamen 
	 * 		- verschiedene Vornamen
	 * 		- gleiche Nachnamen
	 * 		- gleiche Vornamen
	 * 		- Vornamen mit Umlauten
	 * 		- Vornamen mit Großbuchstaben
	 * 		- Vornamen ohne Großbuchstaben
	 * 	  	- Nachnamen mit Umlauten
	 * 		- Nachnamen mit Großbuchstaben
	 * 		- Nachnamen ohne Großbuchstaben
	 * 
	 * 	ungültig:
	 * 		- Nachnamen mit Zeichen, die keine Buchstaben sind
	 * 		- Nachnamen null/leer
	 * 	  	- Vornamen mit Zeichen, die keine Buchstaben sind
	 * 		- Vornamen null/leer		 
	 */
	
	@Test
	public void testSortingOfBigVSLittleLetters() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		// Zza Zzz - gleicher Nachname verschiedener Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yya");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("zza",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		assertEquals("Zzz",content.getValueAt(1, 0));
		assertEquals("Zzz",content.getValueAt(1, 1));
	}

	@Test
	public void testSortingOfDifferentLastDifferentFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		// Azz Zzz - gleicher Nachname mit Großbuchstaben verschiedener Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Ayy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Ayy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Azz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		assertEquals("Zzz",content.getValueAt(1, 0));
		assertEquals("Zzz",content.getValueAt(1, 1));

	}
	
	@Test
	public void testSortingOfEqualLastDifferentFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		// Azz Zzz - gleicher Nachname mit Großbuchstaben verschiedener Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Ayy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Azz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		assertEquals("Zzz",content.getValueAt(1, 0));
		assertEquals("Zzz",content.getValueAt(1, 1));

	}
	
	@Test
	public void testSortingOfDifferentLastEqualFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		// Zzz Zza - gleicher Vorname mit Großbuchstaben verschiedener Nachname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yya");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zza",content.getValueAt(0, 1));
		assertEquals("Zzz",content.getValueAt(1, 0));
		assertEquals("Zzz",content.getValueAt(1, 1));
		
	}
	
	@Test
	public void testSortingOfEqualLastEqualFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - gleicher Vorname mit Großbuchstaben gleicher Nachname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail();	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	@Test
	public void testSortingOfEqualLastEqualFirstWithDifferentLtterSizes() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - gleicher Vorname mit Großbuchstaben gleicher Nachname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail("Should throw Exception.");	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	@Test
	public void testSortingOfEmptyLast() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - gleicher Vorname mit Großbuchstaben leerer Nachname
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail("Should throw Exception.");	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	@Test
	public void testSortingOfEmptyFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - leerer Vorname gleicher Nachname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail("Should throw Exception.");	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	@Test
	public void testSortingOfNonCharInFirst() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - Vorname mit Zahlen gleicher Nachname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "123");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail("Should throw Exception.");	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	@Test
	public void testSortingOfNonCharInLast() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Zzz Zzz - Nachname mit Großbuchstaben Vorname mit Großbuchstaben
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Yyy");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Zzz Zzz - gleicher Vorname Nachname mit Zahlen
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "123");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		try{
			content.getValueAt(1, 0);
			fail("Should throw Exception.");	
		}catch(ArrayIndexOutOfBoundsException e){
			//expected, OK
		}
	}
	
	
	@Test
	public void testSortingOfUmlaute() throws ComponentNotFoundException, MultipleComponentsFoundException{
		TableModel content = ((JTable) getFinder().find(new NameMatcher("viewTable"))).getModel();
		
		// Aeaeae Zzz - Nachname ohne Umlaute Vorname ohne Umlaute
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Yyy");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Aeaeae");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Zzz",content.getValueAt(0, 0));
		assertEquals("Zzz",content.getValueAt(0, 1));
		
		
		// Äää Aaa - Vorname mit Umlaut  Nachname ohne Umlaut
		buttonTester.actionClick(getFinder().find(new NameMatcher("addButton")));
		textTester.actionEnterText(getFinder().find(new NameMatcher("firstNameTextfield")), "Aaa");
		textTester.actionEnterText(getFinder().find(new NameMatcher("lastNameTextfield")), "Äää");
		buttonTester.actionClick(getFinder().find(new NameMatcher("okButton")));
		assertEquals("Aaa",content.getValueAt(0, 0));
		assertEquals("Äää",content.getValueAt(0, 1));
		assertEquals("Zzz",content.getValueAt(1, 0));
		assertEquals("Aeaeae",content.getValueAt(1, 1));
	}
	
}
