/**
 * @desc This module contains the templates for your exercises. There are five excercises, to solve. 
 * If possible do not rename the test cases. But if you want you can of course create new test cases. in addition.
 * 
 */
module aBBehavior {
	import from aB all;
	import from aBConfig all;
	import from aBTemplates all;


	group testCases {

        /**
		 * @desc
		 *     This test case should check that addEntry works as expected. 
		 *     This means that no response shall be received within a given period of time
		 *     A timer shall be used to check this.
		 *     The verdict should be pass.
		 */
        testcase TC_addEntry_withTimer () runs on ClientComponent system AddressBookSystem {
            timer t := 5.0;
            map(self:sp, system:sp);
            initialClear();

            sp.send(tAddEntry(tFirstEntry));
            // please start a timer
            t.start;
            
            alt {
				// 1. Check that you do not receive anything
				// 2. Until the timer timesout
				[] t.timeout {
				    setverdict(pass);
				}
				[] sp.receive {
				    setverdict(fail);
				}
            }
        }		
		
        /**
		 * @desc
		 *     This test case checks if the System Under Test reports correctly
		 *     that a user already exists in the database.
		 *     For this you should 
		 *     	- first insert a message and then
		 *      - reinsert the same message and catch the response.
		 *      Guard all operations with timers
		 *     The verdict should be pass.
		 */
        testcase TC_addEntry_UserExists() runs on ClientComponent system AddressBookSystem {
            timer t  := 5.0;
            timer t2 := 10.0;
            var userExists rep;
            
            map(self:sp, system:sp);

            sp.send(clear_:{});
            setverdict(pass);
            
            log("Send my first message");
            // Send a message
            sp.send(tAddEntry(tFirstEntry));
            
            // Start a timer 
            t.start;
            alt {
				// Check for correct behaviour
				[] sp.receive {
				    setverdict(fail);
				}
				[] t.timeout {
				 	setverdict(pass);
				}
            }

            log("Send my second message");
            // send the same message
            sp.send(tAddEntry(tFirstEntry)); 
            	
            // Start a timer
            t2.start;
            alt {
				// Check that the userExist message is received and that the message
				// has the correct contents
				[] sp.receive(rep) {
				    setverdict(pass);
				}
				[] sp.receive {
				    setverdict(fail);
				}
				[] t2.timeout {
				    setverdict(inconc);
				}
            }
        }


		/**
		 * @desc This testcase shall find the maximum size of the addressBook.
		 * The way to test is could be to insert fresh entrys in a loop and to catch the sizeLimitReached message.
		 * We assume that the maximum size is below 10.
		 * The verdict should be pass. 
		 */
		testcase TC_addEntry_sizeLimitReached() runs on ClientComponent system AddressBookSystem {
            timer t := 10.0;
            var boolean stillNotFound := true;
            var boolean timedOut := false;
            var integer i := 0;
            var sizeLimitReached rep;
            
			map(self:sp, system:sp);

			initialClear();

			do {
			    // here we construct a frest entry
				var charstring aName := int2str(float2int(rnd() * 1000.0));
				sp.send(tAddEntry(tFlexEntry(SurName:aName, FirstName:aName)));
				
				// Start the timer
				t.start;
				alt {
					// Handle the responses and timers correctly.
					[] sp.receive(rep) {
					    stillNotFound := false;
					}
					[] sp.receive {
					   setverdict(inconc);
					}
					[] t.timeout {
                        timedOut := true;
					}
				}
				// increment the counter
				i := i + 1;
			} while (stillNotFound and not timedOut and i <= 10);
			
			if (stillNotFound or timedOut) {
			    setverdict(fail);
			}
			else {
                log("The size limit is " & int2str(i));
				setverdict(pass);
			}
		}
	
		/**
		 * @desc
		 *     This test case tries to receive the contact information of a
		 *     database entry. The verdict should be pass.
		 *     
		 *     1. First we insert the a valid addressbook entry and then
		 *     2. We search for this entry and compare the email.
		 */
		testcase TC_getEntry_valid_Email() runs on ClientComponent system AddressBookSystem {
		    timer t  := 5.0;
            timer t2 := 10.0;
		    var getEntryReply rep;
		    
			map(mtc:sp, system:sp);
			initialClear();

			// 1. Insert the addressbook entry safely
			sp.send(tAddEntry(tFirstEntry));

			t.start;
			alt {
				// Check for the correct responses and handle the timers.
				[] sp.receive {
				    setverdict(fail);
				}
				[] t.timeout {
				    setverdict(pass);
				}
			}

			// 2. Search for the entry via the getEntry message. Use the surName as the key.
			sp.send(tGetEntry(tFirstEntry.surName));
		
			t2.start;
			alt {
                // Check for the correct responses and timers.
                [] sp.receive(rep) {
                    if (rep.contact.email == tFirstEntry.contact.email) {
                        setverdict(pass);
                    }
                    else {
                        setverdict(fail);
                    }
                }
                [] sp.receive {
                    setverdict(fail);
                }
                [] t2.timeout {
                    setverdict(inconc);
                }
			}
		}

		/**
		 * @desc This test cases tests that if the contact field is has a phonenumber
		 * 	the phone number has the correct value stored. 
		 *  
		 * The verdict should be pass in case the stored phone number is the correct one.
		 */
		testcase TC_getEntry_valid_phoneNumber() runs on ClientComponent system AddressBookSystem {
		    timer t := 5.0;
            var getEntryReply rep;
            
			map(mtc:sp, system:sp);
			initialClear();

			// 1. Add a contact with a phone number
			sp.send(tAddEntry(tSecondEntry));
			t.start;
			alt {
                // Check for the correct responses and timers.
                [] sp.receive {
                    setverdict(fail);
                }
                [] t.timeout {
                    setverdict(pass);
                }
			}

			// 2. Search for the entry via the getEntry message. Use the surName as the key.
			sp.send(tGetEntry(tSecondEntry.surName));
			t.start;
			alt {
                // Check for the correct responses and timers.
				// Pay in particular attention to the phone number content
                [] sp.receive(rep) {
                    if (rep.contact.number == tSecondEntry.contact.number) {
                        setverdict(pass);
                    }
                    else {
                        setverdict(fail);
                    }
                }
                [] sp.receive {
                    setverdict(fail);
                }
                [] t.timeout {
                    setverdict(inconc);
                }
			}
		}

	}

	group functions {
		/**
		 * @desc precondition to clear initially the database.
		 */
		function initialClear() runs on ClientComponent {
			sp.send(clear_:{});
			t1.start;
			alt {
				[] sp.receive {
					setverdict(inconc, "Received a message after a clear operation.");
				}
				[] t1.timeout {
					setverdict(pass, "Passed the clear operation.");
				}
			}
		}

	}

}
