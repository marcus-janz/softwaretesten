/**
 * @desc This module contains possible solutions for Excercise 4 
 */
module aBBehavior {
	import from aB all;
	import from aBConfig all;
	import from aBTemplates all;



	/**
	 * @desc
	 *     This test case demonstrates the problems that can occur when
	 *     using the [else ] clause.
	 *     The verdict should be pass.
	 */
	testcase TC_addEntry_withElse() runs on ClientComponent system AddressBookSystem {
		map(self:sp, system:sp);
        sp.send(clear_:{});
        t1.start;
        alt {
            [] sp.receive {
                setverdict(inconc, "Received a message after a clear operation.");
            }
            [] t1.timeout {
                setverdict(pass, "Passed the clear operation.");
            }
        }

		sp.send(tAddEntry(tFirstEntry));
		alt {
			[] sp.receive {
				setverdict(fail, "Received an unexpected message after sending an addEntry.");
			}
			[else] {
				setverdict(pass, "Received no message after sending an addEntry.");
			}
		}
	}
	

	/**
	 * @desc  This test case checks if clear does really work. The verdict should be pass. 
	 */
	testcase TC_clear() runs on ClientComponent system AddressBookSystem {
		map(self:sp, system:sp);
        sp.send(clear_:{});
        t1.start;
        alt {
            [] sp.receive {
                setverdict(inconc, "Received a message after a clear operation.");
            }
            [] t1.timeout {
                setverdict(pass, "Passed the clear operation.");
            }
        }
		sp.send(tAddEntry(tFirstEntry));
        t1.start;
        alt {
            [] sp.receive {
                setverdict(inconc, "Received an unexpected message after sending an addEntry.");
                stop;
            }
            [] t1.timeout {
                setverdict(pass, "Received no message after sending an addEntry.");
            }
        }
        
		sp.send(tGetEntry(tFirstEntry.surName));
		t1.start;
		alt {
			[] sp.receive(getEntryReply:{contact := tFirstEntry.contact}) {
				setverdict(pass);
			}
			[] sp.receive {
				setverdict(fail, "Received other getEntryReply than expected.");
			}
			[] t1.timeout {
				setverdict(fail, "Timeout occured, expected message 'getEntryReply' not received.");
				stop;
			}
		}
		
        sp.send(clear_:{});
        t1.start;
        alt {
            [] sp.receive {
                setverdict(inconc, "Received an unexpected message after sending clear_.");
                stop;
            }
            [] t1.timeout {
                setverdict(pass, "Received no message after sending a clear_.");
            }
        }
        
        //now send getEntry
        sp.send(tGetEntry(tFirstEntry.surName));
        t1.start;
        alt {
            [] sp.receive(notFound:{surName := tFirstEntry.surName}) {
                setverdict(pass, "Received the expected notFound message.");
            }
            [] sp.receive {
                setverdict(fail, "Received other message than expected 'notFound'.");
            }
            [] t1.timeout {
                setverdict(fail, "Timeout occured, expected message 'notFound' not received.");
            }
        }
    }
	with {
		extension "Description: This testcase demonstrates the correct combination of addEntry and getEntry. The verdict should be pass."
	}
	
	control {
	    var integer i;
	    for (i:=0; i<10; i:=i+1) {
	     execute(TC_getEntry_valid_Email(), 5.0);
	    }
	}
}
